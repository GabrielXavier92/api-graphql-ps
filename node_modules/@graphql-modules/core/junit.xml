<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="55" failures="0" time="7.556">
  <testsuite name="Dependency Injection" errors="0" failures="0" skipped="2" timestamp="2019-09-12T03:50:19" time="2.205" tests="3">
    <testcase classname="Dependency Injection" name="clear instances if provider is overwritten" time="0.008" file="../di/tests/di.spec.ts">
    </testcase>
    <testcase classname="Dependency Injection" name="should not have a memory leak over multiple sessions" time="0" file="../di/tests/di.spec.ts">
      <skipped/>
    </testcase>
    <testcase classname="Dependency Injection" name="should not have a memory leak over multiple sessions with a session-scoped provider" time="0" file="../di/tests/di.spec.ts">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Users Module" errors="0" failures="0" skipped="0" timestamp="2019-09-12T03:50:19" time="3.306" tests="1">
    <testcase classname="Users Module" name="boop" time="0.003" file="../../examples/basic-with-dependency-injection/src/modules/user/tests/users.spec.ts">
    </testcase>
  </testsuite>
  <testsuite name="GraphQLModule" errors="0" failures="0" skipped="2" timestamp="2019-09-12T03:50:19" time="4.469" tests="51">
    <testcase classname="GraphQLModule" name="should return the correct GraphQLSchema" time="0.051" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should trigger the correct GraphQL context builders and build the correct context" time="0.011" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should work without a GraphQL schema and set providers" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should put the correct providers to the injector" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should allow to get schema" time="0" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should inject dependencies to factory functions using Inject" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should inject properties of classes" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Schema merging" name="should merge types and directives correctly" time="0.009" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Schema merging" name="should merge scalars" time="0.004" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Module Dependencies" name="should init modules in the right order with onInit hook" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Module Dependencies" name="should set config per each module" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Module Dependencies" name="should not allow to use modules without configuration if required" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Module Dependencies" name="should encapsulate between providers from different non-dependent modules" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Module Dependencies" name="should encapsulate resolvers" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule onRequest Hook" name="should call onRequest hook on each session" time="0.004" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule onRequest Hook" name="should pass network session to onRequest hook" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule onResponse Hook" name="should call onResponse hook on each session" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule onResponse Hook" name="should pass network session to onResponse hook" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule onResponse Hook" name="should destroy session context after response" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Resolvers Composition" name="should call resolvers composition with module context" time="0" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Resolvers Composition" name="should compose child resolvers with correct result and parameters" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Resolvers Composition" name="a resolver can be composed by two different modules" time="0.005" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Resolvers Composition" name="should inject context correctly into `__resolveType`" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Schema Directives" name="should handle schema directives" time="0.009" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Schema Directives" name="should handle child schema directives" time="0.007" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Providers Scope" name="should construct session scope on each network session" time="0.004" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Providers Scope" name="should construct request scope on each injector request independently from network session" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Providers Scope" name="should inject network session with moduleSessionInfo in session and request scope providers" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Extra Schemas" name="should handle extraSchemas together with local ones" time="0.005" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should mutate schema using middleware" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should encapsulate the schema mutations using middleware" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should avoid getting non-configured module" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should export correct typeDefs and resolvers" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should resolve scalars correctly" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Apollo DataSources Integration" name="Should pass cache correctly to initialize method of application scoped provider" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule Apollo DataSources Integration" name="Should pass context correctly to initialize method of session scoped provider" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should exclude network session" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should import types from submodules" time="0.019" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should work with SchemaLink" time="0.02" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should generate schemaless module if an empty array typeDefs specified" time="0" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should generate schemaless module if empty string typeDefs specified" time="0" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should generate schemaless module if an array with an empty string typeDefs specified" time="0.001" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should throw an error if promises are used without schemaAsync" time="0.043" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should support promises with schemaAsync" time="0.003" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should inject ModuleSession in session-scope using properties in case of inheritance" time="0.002" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should not have _onceFinishListeners on response object" time="1.004" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should not have memory leak over multiple sessions with session-scoped providers" time="0" file="tests/graphql-module.spec.ts">
      <skipped/>
    </testcase>
    <testcase classname="GraphQLModule" name="should not memory leak over multiple sessions (not collected by GC but emitting finish event) with session-scoped providers" time="0" file="tests/graphql-module.spec.ts">
      <skipped/>
    </testcase>
    <testcase classname="GraphQLModule" name="make sure it won&apos;t crash on deeply nested structure" time="0.011" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should support resolveType resolver for union types" time="0.01" file="tests/graphql-module.spec.ts">
    </testcase>
    <testcase classname="GraphQLModule" name="should support isTypeOf resolver for union types" time="0.016" file="tests/graphql-module.spec.ts">
    </testcase>
  </testsuite>
</testsuites>